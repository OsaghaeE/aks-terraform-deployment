
trigger:
  branches:
    include:
      - main

variables:
  azureServiceConnection: 'azure-connect'
  environment: 'dev'
  tfVersion: '1.4.6'
  backend_rg: 'tfstate-rg'
  backend_sa: 'evergrowthtfstate'
  backend_container: 'tfstate'
  backend_key: 'aks-dev.terraform.tfstate'

stages:
- stage: Terraform
  displayName: 'Deploy AKS via Terraform'
  jobs:
  - job: DeployAKS
    displayName: 'Terraform Init → Plan → Apply'
    pool:
      vmImage: 'ubuntu-latest'

      steps:
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(backend_rg)'
        backendAzureRmStorageAccountName: '$(backend_sa)'
        backendAzureRmContainerName: '$(backend_container)'
        backendAzureRmKey: '$(backend_key)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(backend_rg)'
        backendAzureRmStorageAccountName: '$(backend_sa)'
        backendAzureRmContainerName: '$(backend_container)'
        backendAzureRmKey: '$(backend_key)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: '-var-file="terraform.tfvars" -out=tfplan'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: 'tfplan'
        allowTelemetryCollection: false
